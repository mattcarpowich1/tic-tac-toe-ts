{"version":3,"sources":["types.tsx","gameUtils.tsx","reducers/gameReducer.tsx","reducers/index.tsx","components/Container/Container.tsx","components/Header/Header.tsx","components/NumberSelector/NumberSelector.tsx","components/Board/Board.tsx","components/GameMessage/GameMessage.tsx","components/GameZone/GameZone.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameState","ActionTypes","X","EMPTY","generateNewGameState","newBoard","boardDimension","BOARD_DIMENSION","i","connection","base","j","X_WINS","O_WINS","topLeftDiagonalBase","topRightDiagonalBase","includes","IN_PROGRESS","TIE_GAME","emptyBoard","initialState","currentPlayer","board","gameState","NOT_STARTED","newGameState","combineReducers","game","state","action","type","MAKE_MOVE","index","value","slice","RESET_GAME","Array","fill","GO_HOME","SET_BOARD_DIMENSION","dimension","Container","props","className","children","Header","NumberSelector","dispatch","useDispatch","onClick","GameBoard","useSelector","gameBoard","console","log","chunkedBoard","_","chunk","map","square","makeMove","GameMessage","GameZone","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","reducers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6dd9ce3d.chunk.js","sourcesContent":["export type Square = 'X' | 'O' | '';\n\nexport type Board = Square[];\n\nexport enum GameState {\n  NOT_STARTED = 'NOT STARTED',\n  IN_PROGRESS = 'IN PROGRESS',\n  TIE_GAME = 'TIE GAME',\n  X_WINS = 'X WINS',\n  O_WINS = 'O WINS'\n};\n\nexport type Game = {\n  currentPlayer: 'X' | 'O',\n  board: Board,\n  gameState: GameState,\n  boardDimension: number\n};\n\nexport enum ActionTypes {\n  MAKE_MOVE = 'MAKE MOVE',\n  RESET_GAME = 'RESET GAME',\n  GO_HOME = 'GO HOME',\n  SET_BOARD_DIMENSION = 'SET BOARD DIMENSION'\n};\n","import {\n  Board,\n  GameState,\n  Square\n} from './types';\n\nconst X : Square = 'X';\nconst EMPTY : Square = '';\n\nexport const generateNewGameState = (newBoard: Board, boardDimension : number = 3) => {\n  const BOARD_DIMENSION : number = boardDimension;\n  // check horizontal connections\n  for (let i = 0; i <= (BOARD_DIMENSION * (BOARD_DIMENSION - 1)); i += BOARD_DIMENSION) {\n    if (newBoard[i] === EMPTY) {\n      continue;\n    }\n    let connection : boolean = true;\n    const base : Square = newBoard[i];\n    for (let j = i; j < i + BOARD_DIMENSION; j++) {\n      if (newBoard[j] !== base) {\n        connection = false;\n        break;\n      }\n    }\n    if (connection) {\n      if (base === X) {\n        return GameState.X_WINS;\n      }\n      return GameState.O_WINS;\n    }\n  }\n  // check vertical connections\n  for (let i = 0; i < BOARD_DIMENSION; i += 1) {\n    if (newBoard[i] === EMPTY) {\n      continue;\n    }\n    let connection : boolean = true;\n    const base : Square = newBoard[i];\n    for (let j = i; j <= (BOARD_DIMENSION * (BOARD_DIMENSION - 1)) + i; j += BOARD_DIMENSION) {\n      if (newBoard[j] !== base) {\n        connection = false;\n        break;\n      }\n    }\n    if (connection) {\n      if (base === X) {\n        return GameState.X_WINS;\n      }\n      return GameState.O_WINS;\n    }\n  }\n  // check diagonal connections\n  // left to right diagonal\n  const topLeftDiagonalBase : Square = newBoard[0];\n  if (topLeftDiagonalBase) {\n    let connection : boolean = true;\n    for (let i = 0; i < BOARD_DIMENSION * BOARD_DIMENSION; i += BOARD_DIMENSION + 1) {\n      if (newBoard[i] !== topLeftDiagonalBase) {\n        connection = false;\n        break;\n      }\n    }\n    if (connection) {\n      if (topLeftDiagonalBase === X) {\n        return GameState.X_WINS;\n      }\n      return GameState.O_WINS;\n    }\n  }\n  // right to left diagonal\n  const topRightDiagonalBase : Square = newBoard[BOARD_DIMENSION - 1];\n  if (topRightDiagonalBase) {\n    let connection : boolean = true;\n    for (let i = BOARD_DIMENSION - 1; i <= BOARD_DIMENSION * (BOARD_DIMENSION - 1); i += BOARD_DIMENSION - 1) {\n      if (newBoard[i] !== topRightDiagonalBase) {\n        connection = false;\n        break;\n      }\n    }\n    if (connection) {\n      if (topRightDiagonalBase === X) {\n        return GameState.X_WINS;\n      }\n      return GameState.O_WINS;\n    }\n  }\n  // check for tie\n  if (newBoard.includes(EMPTY)) {\n    return GameState.IN_PROGRESS;\n  }\n  return GameState.TIE_GAME;\n};\n","import { AnyAction } from 'redux';\nimport {\n  Square,\n  Board,\n  GameState,\n  Game,\n  ActionTypes\n} from '../types';\nimport { generateNewGameState } from '../gameUtils';\n\nconst EMPTY : Square = '';\nconst X : Square = 'X';\nconst O : Square = 'O';\n\nconst emptyBoard : Board = [\n  EMPTY, EMPTY, EMPTY,\n  EMPTY, EMPTY, EMPTY,\n  EMPTY, EMPTY, EMPTY\n];\n\nconst initialState : Game = {\n  currentPlayer: X,\n  board: emptyBoard,\n  gameState: GameState.NOT_STARTED,\n  boardDimension: 3\n};\n\nconst newGameState : Game = {\n  currentPlayer: X,\n  board: emptyBoard,\n  gameState: GameState.IN_PROGRESS,\n  boardDimension: 3\n}\n\nexport const gameReducer = (state : Game = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case ActionTypes.MAKE_MOVE:\n      const {\n        index,\n        value\n      } = action;\n      const newBoard : Board = [\n        ...state.board.slice(0, index),\n        value,\n        ...state.board.slice(index + 1)\n      ];\n      const gameState = generateNewGameState(newBoard, state.boardDimension);\n      return {\n        ...state,\n        board: newBoard,\n        gameState,\n        currentPlayer: state.currentPlayer === X ? O : X\n      };\n    \n    case ActionTypes.RESET_GAME:\n      return {\n        ...newGameState,\n        board: new Array(state.boardDimension * state.boardDimension).fill(EMPTY),\n        boardDimension: state.boardDimension\n      };\n\n    case ActionTypes.GO_HOME: \n      return initialState;\n\n    case ActionTypes.SET_BOARD_DIMENSION:\n      const { dimension } = action;\n      return {\n        ...state,\n        boardDimension: dimension\n      };\n\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux';\nimport { gameReducer } from './gameReducer';\n\nexport default combineReducers({\n  game: gameReducer\n});\n","import React from 'react';\nimport './Container.css';\n\ntype ContainerProps = {\n  children: any\n};\n\nconst Container = (props: ContainerProps) => (\n  <div className=\"container\">\n    {props.children}\n  </div>\n);\n\nexport default Container;\n","import React from 'react';\nimport './Header.css';\n\nconst Header = () => (\n  <header>\n    <h3>Ultimate</h3>\n    <h1>TIC-TAC-TOE</h1>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  ActionTypes\n} from '../../types';\nimport './NumberSelector.css';\n\nconst NumberSelector = ({ value } : { value : number }) => {\n  const dispatch = useDispatch();\n\n  const increment = () => {\n    dispatch({ \n      type: ActionTypes.SET_BOARD_DIMENSION,\n      dimension: value < 7 ? value + 1 : value\n    })\n  };\n\n  const decrement = () => {\n    dispatch({ \n      type: ActionTypes.SET_BOARD_DIMENSION,\n      dimension: value > 2 ? value - 1 : value\n    })\n  };\n\n  return (\n    <div className=\"numberSelector\">\n      <h4>Board Size:</h4>\n      <div className=\"numberSelectorBottom\">\n        <div className=\"left\">\n          {value}x{value}\n        </div>\n        <div className=\"right\">\n          <button onClick={increment}>\n            +\n          </button>\n          <button onClick={decrement}>\n            -\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default NumberSelector;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport {\n  Square,\n  Board,\n  ActionTypes,\n  GameState\n} from '../../types';\nimport './Board.css';\n\nconst GameBoard = () => {\n  const boardDimension = useSelector((state : any) => state.game.boardDimension);\n  const gameBoard : Board = useSelector((state : any) => state.game.board);\n  const currentPlayer : Square = useSelector((state : any) => state.game.currentPlayer);\n  const gameState : GameState = useSelector((state : any) => state.game.gameState);\n  const dispatch = useDispatch();\n\n  console.log(boardDimension);\n  const chunkedBoard = _.chunk(gameBoard, boardDimension);\n\n  console.log(chunkedBoard);\n\n  const makeMove = (square: Square, index : number) => {\n    if (square || gameState !== GameState.IN_PROGRESS) {\n      return;\n    }\n    return dispatch({\n      type: ActionTypes.MAKE_MOVE,\n      index,\n      value: currentPlayer\n    });\n  }\n\n  return (\n    <div className=\"gameBoard\">\n    {\n      chunkedBoard.map((chunk : any, index: number) => (\n        <div className=\"boardRow\" key={index}>\n          {\n            chunk.map((square: Square, i: number) => (\n              <button className={`square ${square}`} key={index} onClick={() => makeMove(square, (index * boardDimension + i))}>\n                {\n                  square && square\n                }\n              </button>\n            ))\n          }\n        </div>\n      ))\n      }\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import React from 'react';\nimport {\n  GameState,\n  Square\n} from '../../types';\nimport './GameMessage.css';\n\nconst GameMessage = ({ currentPlayer, gameState } : { currentPlayer : Square, gameState : GameState }) => (\n  <div className=\"message\">\n    {\n      gameState === GameState.IN_PROGRESS && (\n        `Player ${currentPlayer}'s Move!`\n      )\n    }\n    {\n      gameState === GameState.X_WINS && 'Player X Wins!'\n    }\n    {\n      gameState === GameState.O_WINS && 'Player O Wins!'\n    }\n    {\n      gameState === GameState.TIE_GAME && 'Tie Game!'\n    }\n  </div>\n);\n\nexport default GameMessage;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  GameState,\n  Square,\n  ActionTypes\n} from '../../types';\nimport NumberSelector from '../NumberSelector/NumberSelector';\nimport Board from '../Board/Board';\nimport GameMessage from '../GameMessage/GameMessage';\nimport './GameZone.css';\n\nconst GameZone = () => {\n\n  const dispatch = useDispatch();\n  const gameState : GameState = useSelector((state: any) => state.game.gameState);\n  const currentPlayer : Square = useSelector((state : any) => state.game.currentPlayer);\n  const boardDimension : number = useSelector((state : any) => state.game.boardDimension);\n\n  const startGame = () => {\n    dispatch({\n      type: ActionTypes.RESET_GAME\n    });\n  }\n\n  return (\n    <div className=\"zone\">\n      {\n        gameState === GameState.NOT_STARTED ? (\n          <>\n            <button \n              className=\"actionButton\"\n              onClick={startGame}\n            >\n              Begin Multiplayer Game\n            </button>\n            <NumberSelector value={boardDimension} />\n          </>\n        ) : (\n          <>\n            <div className=\"gameActionButtons\">\n              <button \n                className=\"actionButtonSmallAbsolute\"\n                onClick={() => dispatch({type: ActionTypes.RESET_GAME})}\n              >\n                Reset Game\n              </button>\n              <button \n                className=\"actionButtonSmallAbsolute\"\n                onClick={() => dispatch({type: ActionTypes.GO_HOME})}\n              >\n                Home\n              </button>\n            </div>\n            <GameMessage\n              currentPlayer={currentPlayer}\n              gameState={gameState}\n            />\n            <Board />\n          </>\n        )\n      }\n    </div>\n  );\n};\n\nexport default GameZone;","import React from 'react';\nimport Container from './Container/Container';\nimport Header from './Header/Header';\nimport GameZone from './GameZone/GameZone';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header />\n        <GameZone />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducers from './reducers';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}